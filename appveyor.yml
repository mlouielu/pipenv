build: off
version: 1.0.{build}
skip_branch_with_pr: true

init:
- ps: >-

    git config --global core.sharedRepository true

    git config --global core.longpaths true

    git config --global core.autocrlf input

    if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
            https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
            Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
              Write-Host "There are newer queued builds for this pull request, skipping build."
              Exit-AppveyorBuild
            }

    If (($env:SKIP_NOTAG -eq "true") -and ($env:APPVEYOR_REPO_TAG -ne "true")) {
              Write-Host "Skipping build, not at a tag."
              Exit-AppveyorBuild
          }


environment:

  PYPI_VENDOR_DIR: '.\tests\pypi\'
  GIT_ASK_YESNO: 'false'
  APPVEYOR_SAVE_CACHE_ON_ERROR: 'true'
  APPVEYOR_SKIP_FINALIZE_ON_EXIT: 'true'
  SHELL: 'windows'
  PYTHON_ARCH: '64'
  PYTHONIOENCODING: 'utf-8'

  matrix:
    - PYTHON: 'C:\Python27-x64'
      PYTHON_VERSION: '2.7.x'
      TEST_SUITE: 'not install'

    - PYTHON: 'C:\Python27-x64'
      PYTHON_VERSION: '2.7.x'
      TEST_SUITE: 'install'
      PYTEST_ADDOPTS: '--cache-clear'
      RUN_INTEGRATION_TESTS: 'True'

    - PYTHON: 'C:\Python36-x64'
      PYTHON_VERSION: '3.6.x'
      TEST_SUITE: 'not install'

    - PYTHON: 'C:\Python36-x64'
      PYTHON_VERSION: '3.6.x'
      TEST_SUITE: 'install'
      PYTEST_ADDOPTS: '--cache-clear'
      RUN_INTEGRATION_TESTS: 'True'

    - PYTHON: 'C:\Python37-x64'
      PYTHON_VERSION: '3.7.x'
      TEST_SUITE: 'not install'

    - PYTHON: 'C:\Python37-x64'
      PYTHON_VERSION: '3.7.x'
      TEST_SUITE: 'install'
      PYTEST_ADDOPTS: '--cache-clear'
      RUN_INTEGRATION_TESTS: 'True'

install:
- ps: >-
  
    $script_path = Join-Path -path $env:PYTHON -childpath Scripts
  
    $py_exe = Join-Path -path $env:PYTHON -childpath python.exe
  
    $pipenv_exe = Join-Path -path $script_path -childpath pipenv.exe
  
    $env:PATH = "$py_path;$script_path;$env:PATH"
  
    Invoke-Expression "$py_exe -m pip install --upgrade pip invoke"
  
    Invoke-Expression "$py_exe -m pip install -e ."
  
    Invoke-Expression "$pipenv_exe install --dev"
  
    Invoke-Expression "$pipenv_exe --venv"
  
    Invoke-Expression "$pipenv_exe --py"

cache:
- '%LocalAppData%\pip\cache'
- '%LocalAppData%\pipenv\cache'

test_script:

- ps: >-
    $script_path = Join-Path -path $env:PYTHON -childpath Scripts

    $py_exe = Join-Path -path $env:PYTHON -childpath python.exe

    $pipenv_exe = Join-Path -path $script_path -childpath pipenv.exe

    $env:PATH = "$py_path;$script_path;$env:PATH"

    $invoke_path = Join-Path -path $script_path -childpath invoke.exe

    Invoke-Expression "$pipenv_exe run pytest -v -n 4 --ignore=pipenv\patched --ignore=pipenv\vendor -m `"$env:TEST_SUITE`" tests"

    If ($env:RUN_INTEGRATION_TESTS -and ($env:PYTHON_VERSION -eq "3.6.x")) {

      Invoke-Expression "$py_exe -m pip install invoke parver"

      Invoke-Expression "$invoke_path vendoring.update"

    }
